#!/usr/bin/python

"""Utility to print stats for people in a particular format:

sjg, 66 CLs (57 public, 9 private, 0 coreboot, 0 google3), 483 reviewed (318 public, 163 private, 2 coreboot, 0 google3), 22 bugs fixed (13 private, 9 public), 43 bugs opened (29 private, 14 public)

with HTML links in each case.

It writes out to a www directory in x20 by default.

It needs some tools:

1. Monorail (thanks lannm@)

git clone sso://user/lannm/monorail-cli


2. Bugged

sudo apt-get install bugged



Other things:

a. There is a my_activity.py program in depot_tools which I have played with but
not yet incorporated into my flow.

b. For Google 3 there is autosnippet which I run like this:

g4d -f canary; g4 sync; blaze run //ops/managedsystems/tools/autosnippet:autosnippet -- --week=-1 --pending_cls=false --markdown

c. Also for google 3 there is engineer_report, but I don't use it in Chrome OS
as so little is applicable. It does collate buganizer activity though.

/home/build/static/projects/manager/engineer_report.par \
    -S 09/01/2018 -E 04/01/2019 --O  -D -w

but this fails for me with snippets due to this:

https://groups.google.com/a/google.com/forum/#!msg/lethe-eng/wQOBgliBCJQ/POo6cxyoAAAJ

You can use --noshow_snippets --noshow_tickets

d. go/clstalk  (no Chrome OS, but see dropdown menu top left)

e. Something for looking at github activity (had not tried this):
https://github.com/eseidelGoogle/github_activity

f. go/perf-tools which is 
 

"""

import argparse
from collections import namedtuple
from contextlib import contextmanager
from datetime import date
import os
from sets import Set
import subprocess
import sys
import unittest

############## Configuration here: ###############
start_date = '2019-03-01'

# Leave this unset to search until now
#end_date = '2017-11-26'

##################################################

CLS, BUGS = range(2)

CL_TYPES = range(4)
CL_PUBLIC, CL_PRIVATE, CL_COREBOOT, CL_GOOGLE3 = CL_TYPES

BUG_TYPES = 4, 5
BUGANIZER, CRBUG = BUG_TYPES


STATS = Set()
STATS.add(CLS)
STATS.add(BUGS)

# Select what gets collected (untested)
WHICH_BUGS = Set()
WHICH_BUGS.add(CRBUG)
WHICH_BUGS.add(BUGANIZER)

WHICH_CLS = Set()
WHICH_CLS.add(CL_PUBLIC)
WHICH_CLS.add(CL_PRIVATE)
WHICH_CLS.add(CL_COREBOOT)
WHICH_CLS.add(CL_GOOGLE3)

  
#testing = True
testing = False

if testing:
  start_date = '2017-09-01'
  
end_date = None

Info = namedtuple('Info', ['count', 'query'])


slash_date = start_date.replace('-', '/')


def MakeKey(cmd):
    return ' '.join(cmd)

canned_output = {
    MakeKey(['cros_sdk', '--', 'gerrit', 'search',
             'status:merged owner:test after:2017-09-01']): [
        'https://chromium-review.googlesource.com/#/c/426759/ CR: 2 CQ: 0 V: 0 mosys              mosys: Correct excess elements warnings',
        'https://chromium-review.googlesource.com/#/c/641734/ CR: 0 CQ: 0 V: 0 chromiumos-overlay cros-firmware: Print an error when the bsc-overlay is not set',
        'https://chromium-review.googlesource.com/#/c/645908/ CR: 2 CQ: 0 V: 0 firmware           pack_firmware: Show the model name in the versions file',
        "https://chromium-review.googlesource.com/#/c/646994/ CR: 2 CQ: 0 V: 1 platform2          chromeos-config: Fix naming of 'reef' firmware node",
        ],
    MakeKey(['cros_sdk', '--', 'gerrit', 'search',
             'status:merged reviewer:test -owner:test after:2017-09-01']): [
        'https://chromium-review.googlesource.com/#/c/468650/ CR: 2 CQ: 0 V: 0 mosys              mosys: display full memory part number',
        'https://chromium-review.googlesource.com/#/c/583727/ CR: 2 CQ: 0 V: 0 logitech-updater   Logitech firmware updater for PTZPro2',
        ],
    MakeKey(['cros_sdk', '--', 'gerrit', '-i', 'search',
             'status:merged owner:test after:2017-09-01']): [
        'https://chrome-internal-review.googlesource.com/#/c/444532/m CR: 0 CQ: 0 V: 0 overlay-kahlee-private Drop unused firmware eclass variables',
        'https://chrome-internal-review.googlesource.com/#/c/444552/m CR: 0 CQ: 0 V: 0 overlay-coral-private  Drop unused firmware eclass variables',
        ],
    MakeKey(['cros_sdk', '--', 'gerrit', '-i', 'search',
             'status:merged reviewer:test -owner:test after:2017-09-01']): [
        'https://chrome-internal-review.googlesource.com/#/c/417539/ CR: 2 CQ: 0 V: 0 amd-firmware/stoney                   StoneyPI: Add stoney binaryPI',
        'https://chrome-internal-review.googlesource.com/#/c/417874/ CR: 0 CQ: 0 V: 0 chromeos-partner-overlay              amd-firmware: Add ebuild',
        'https://chrome-internal-review.googlesource.com/#/c/435714/ CR: 2 CQ: 1 V: 1 amd-firmware/raven                    Initial commit: RavenPI-FP5-AM4_1_0_0_0',
        ],
    MakeKey(['monorail', 'list', '--snippet', '-s', 'all', '-n', '10000', '-q',
             'owner:test modified>2017/09/01 status:fixed']): [
        '- [chromium:821994](crbug.com/821994)[M66] [Reef] No Reef build after R66- 10440.0.0',
        '- [chromium:796983](crbug.com/796983)Implement YAML support in cros_config',
        '- [chromium:779438](crbug.com/779438)Implement BCS support in cros_config_host',
        '- [chromium:774498](crbug.com/774498)Small fix-ups Q4 2017',
        ],
    MakeKey(['monorail', 'list', '--snippet', '-s', 'all', '-n', '10000', '-q',
             'reporter:test opened>2017/09/01']): [
        "- [chromium:821128](crbug.com/821128)Drop the 'parent' files in Coral / cros-model.eclass",
        '- [chromium:813442](crbug.com/813442)Drop cros_config_host_py',
        '- [chromium:796983](crbug.com/796983)Implement YAML support in cros_config',
        '- [chromium:779438](crbug.com/779438)Implement BCS support in cros_config_host',
        '- [chromium:774498](crbug.com/774498)Small fix-ups Q4 2017',
        ],
    MakeKey(['bugged', 'search', 'owner:test', 'modified>2017-09-01',
             'status:fixed']): [
        'issue     component  created   modified  reporter     assignee                                        priority  status  summary',
        '74733513  197583     20180314  20180315  shapiroc     hanwen                                          P1        FIXED   Chrome OS private overlays are no longer indexed',
        '72947182  191631     20180205  20180205  akillips     pleichtle                                       P3        FIXED   GSuite Contact Sales with < 20 employees should be ass',
        ],
    MakeKey(['bugged', 'search', 'r:test created>2017-09-01']): [
        'issue     component  created   modified  reporter  assignee        priority  status             summary',
        '74193661  46805      20180305  20180312  sjg       pedrosimonetti  P2        DUPLICATE          [feedback] Audio is skipping every ~7 seconds on my glinux workstations',
        '74108115  324720     20180302  20180302  sjg       mcolagrosso     P2        ASSIGNED           [Drive SWM FB] I like this better than the pictures. Wish it could hold a few more docs (say 10)?',
        ],
    MakeKey(['ssh -p 29418 review.coreboot.org gerrit query "status:merged owner:test after:2017-09-01"']): [
      '''lines:
change Id079c099ee4cf6a07724241af4400063f4551668
  project: coreboot
  branch: master
  id: Id079c099ee4cf6a07724241af4400063f4551668
  number: 28245
  subject: libpayload/x86/delay: Make arch_ndelay call apic_delay if delay is long
  owner:
    name: Raul Rangel
    email: rrangel@chromium.org
    username: rrangel
  url: https://review.coreboot.org/28245
  commitMessage: libpayload/x86/delay: Make arch_ndelay call apic_delay if delay is long
                 
                 This reduces power consumption on grunt by over 3W when sitting at the
                 depthcharge recovery screen.
                 
                 BUG=b:109749762
                 TEST=Booted grunt in the recovery screen and made sure it continued to
                 work.
                 
                 Change-Id: Id079c099ee4cf6a07724241af4400063f4551668
                 Signed-off-by: Raul E Rangel <rrangel@chromium.org>
                 Reviewed-on: https://review.coreboot.org/28245
                 Reviewed-by: Martin Roth <martinroth@google.com>
                 Reviewed-by: Richard Spiegel <richard.spiegel@silverbackltd.com>
                 Reviewed-by: Julius Werner <jwerner@google.com>
                 Tested-by: build bot (Jenkins) <no-reply@coreboot.org>
  createdOn: 2018-08-20 20:01:09 GMT
  lastUpdated: 2018-09-12 14:26:04 GMT
  open: false
  status: MERGED

change I80363f06bdb22d0907f895885e607fde1c4c468d
  project: coreboot
  branch: master
  id: I80363f06bdb22d0907f895885e607fde1c4c468d
  number: 28242
  subject: libpayload/x86/apic: Add an apic_delay method and calibrate the timer
  owner:
    name: Raul Rangel
    email: rrangel@chromium.org
    username: rrangel
  url: https://review.coreboot.org/28242
  commitMessage: libpayload/x86/apic: Add an apic_delay method and calibrate the timer
                 
                 The apic_delay method will halt the CPU and wait for a timer interrupt
                 to fire. I went with usec because nsec is too granular to guarantee.
                 
                 This method will be called from an arch_ndelay() method when the delay
                 is large enough to justify a sleep.
                 
                 BUG=b:109749762
                 TEST=Tested it on grunt by changing the _delay method to call
                 apic_delay().
                 
                 Change-Id: I80363f06bdb22d0907f895885e607fde1c4c468d
                 Signed-off-by: Raul E Rangel <rrangel@chromium.org>
                 Reviewed-on: https://review.coreboot.org/28242
                 Tested-by: build bot (Jenkins) <no-reply@coreboot.org>
                 Reviewed-by: Martin Roth <martinroth@google.com>
  createdOn: 2018-08-20 20:01:09 GMT
  lastUpdated: 2018-09-12 14:22:44 GMT
  open: false
  status: MERGED
'''
         ],
    MakeKey(['ssh -p 29418 review.coreboot.org gerrit query "status:merged reviewer:test -owner:test after:2017-09-01"']): [
    '''change I389815bc36b8610a30b0cbb9d73262ad392e0181
  project: coreboot
  branch: master
  id: I389815bc36b8610a30b0cbb9d73262ad392e0181
  number: 27465
  subject: mainboard/google/Kahlee: Select low-power mode for WiFi
  owner:
    name: Simon Glass
    email: sjg@chromium.org
    username: sjg
  url: https://review.coreboot.org/27465
  commitMessage: mainboard/google/Kahlee: Select low-power mode for WiFi
                 
                 Put the PCIe clock pins in power-saving mode for the WiFi module to save
                 power.
                 
                 Note: This currently does not appear to have any effect on grunt.
                 
                 BUG=b:110041917
                 BRANCH=none
                 TEST=boot without this patch:
                 $ iotools mem_read32 0xfed80e00
                 0x0046f3ff
                 
                 With this patch:
                 $ iotools mem_read32 0xfed80e00
                 0x0046f3f1
                 
                 Change-Id: I389815bc36b8610a30b0cbb9d73262ad392e0181
                 Signed-off-by: Simon Glass <sjg@chromium.org>
                 Reviewed-on: https://review.coreboot.org/27465
                 Tested-by: build bot (Jenkins) <no-reply@coreboot.org>
                 Reviewed-by: Aaron Durbin <adurbin@chromium.org>
                 Reviewed-by: Martin Roth <martinroth@google.com>
                 Reviewed-by: Paul Menzel <paulepanter@users.sourceforge.net>
  createdOn: 2018-07-12 19:03:07 GMT
  lastUpdated: 2018-07-18 20:10:45 GMT
  open: false
  status: MERGED

change Ia7c711304ffe460a9fb0d4f654a51485958239ea
  project: coreboot
  branch: master
  id: Ia7c711304ffe460a9fb0d4f654a51485958239ea
  number: 27464
  subject: mainboard/google/kahlee: Enable ASPM on PCI express
  owner:
    name: Simon Glass
    email: sjg@chromium.org
    username: sjg
  url: https://review.coreboot.org/27464
  commitMessage: mainboard/google/kahlee: Enable ASPM on PCI express
                 
                 We should use active-state power management where possible to reduce
                 power consumption during normal operation. Enable these options.
                 
                 Linux does not seem to enable this for AMD, and the Intel code in coreboot
                 does enable these options.
                 
                 PCIEXP_COMMON_CLOCK is enabled also, to follow how Intel does it.
                 
                 BUG=b:110041917
                 TEST=boot on grunt, see that WiFi and eMMC still run OK
                 
                 Change-Id: Ia7c711304ffe460a9fb0d4f654a51485958239ea
                 Signed-off-by: Simon Glass <sjg@chromium.org>
                 Reviewed-on: https://review.coreboot.org/27464
                 Reviewed-by: Martin Roth <martinroth@google.com>
                 Tested-by: build bot (Jenkins) <no-reply@coreboot.org>
  createdOn: 2018-07-12 19:03:07 GMT
  lastUpdated: 2018-07-18 20:10:36 GMT
  open: false
  status: MERGED

'''],
    MakeKey(['bugged', 'search', 'a:test modified>2017-09-01 status:fixed']): [
      'issue      component  created   modified  reporter                                     assignee  priority  status  summary',
      '111408252  168336     20180712  20180828  apphosting-stubby-api--s-7ecros-2dgoldeneye  sjg       P2        FIXED   Project Liara: Make sure the builder for your device is not marked as experimental',
      '111408847  168336     20180712  20180828  apphosting-stubby-api--s-7ecros-2dgoldeneye  sjg       P2        FIXED   Project Liara: Get the release builder up and running',
   ],
   MakeKey(['clsearch a:test from:2017/09/01']): [
     "http://cl/162008349 on 2017/07/14-15:28 by sjg@sjg:kiwi-main-m-NAgfoQmjY0lzP-git5:1970:citc 'Check board isUnibuild flag whe'"
     "http://cl/161997835 on 2017/07/14-14:17 by sjg@sjg:kiwi-main-m-N0NNdalb2y1O5-git5:1937:citc 'Require that boards with models'",
     ],
   MakeKey(['clsearch r:test from:2017/09/01']): [
     "http://cl/162008349 on 2017/07/14-15:28 by sjg@sjg:kiwi-main-m-NAgfoQmjY0lzP-git5:1970:citc 'Check board isUnibuild flag whe'"
     "http://cl/161997835 on 2017/07/14-14:17 by sjg@sjg:kiwi-main-m-N0NNdalb2y1O5-git5:1937:citc 'Require that boards with models'",
     ],
}


# Use this to suppress stdout/stderr output:
# with capture_sys_output() as (stdout, stderr)
#   ...do something...
@contextmanager
def capture_sys_output():
  capture_out, capture_err = StringIO(), StringIO()
  old_out, old_err = sys.stdout, sys.stderr
  try:
    sys.stdout, sys.stderr = capture_out, capture_err
    yield capture_out, capture_err
  finally:
    sys.stdout, sys.stderr = old_out, old_err


def TestCmd(cmd):
    key = MakeKey(cmd)
    result = canned_output.get(key)
    if not result:
      print key
      print canned_output.keys()[0]
      raise ValueError("Unknown key '%s'" % key)
    if '\n' in result:
      return result.splitlines()
    return result

def run_cmd(cmd, use_ssh=False, cros_sdk=False):
    #print cmd
    if use_ssh:
      cmd = ['ssh', '-p', '29418', 'review.coreboot.org'] + cmd
    elif cros_sdk:
      cmd = ['cros_sdk', '--'] + cmd
    if testing:
      lines = TestCmd(cmd)
      if len(lines) == 1:
        lines = lines[0].splitlines()
    else:
      lines = subprocess.check_output(cmd, stderr=subprocess.PIPE,
                                      shell=False).splitlines()
    if use_ssh:
      lines = [line for line in lines if 'change I' in line]
  
    return lines

# Show some CLs
#  $1: Additional parameters for search, e.g. "owner:sjg"
def get_cls(terms, cl_type):
  if cl_type == CL_GOOGLE3:
    terms = ' '.join(terms)
    cmd = ['clsearch'] + [terms]
  else:
    terms="status:merged %s after:%s" % (' '.join(terms), start_date)
    if end_date:
        terms += ' before:%s' % end_date
    cmd = ['gerrit']
    if cl_type == CL_PRIVATE:
        cmd.append('-i')
    cmd.append('query' if cl_type == CL_COREBOOT else 'search')
    if cl_type == CL_COREBOOT:
      cmd.append('"%s"' % terms)
    else:
      cmd.append(terms)
  lines = run_cmd(cmd, cl_type == CL_COREBOOT, cros_sdk=cl_type != CL_GOOGLE3)
  return Info(len(lines), terms)

def do_all_cls(stats, user, stat_set):
    for cl_type in (CL_PUBLIC, CL_PRIVATE, CL_COREBOOT, CL_GOOGLE3):
      if cl_type in stat_set:
        if cl_type == CL_GOOGLE3:
          stats[cl_type]['submitted'] = get_cls(['a:%s' % user, 'from:%s' % slash_date], cl_type)
          stats[cl_type]['reviewed'] = get_cls(['r:%s' % user, 'from:%s' % slash_date], cl_type)
        else:
          stats[cl_type]['submitted'] = get_cls(['owner:%s' % user], cl_type)
          #stats[cl_type]['reviewed'] = get_cls(['reviewer:%s' % user, '-owner:%s' % user], cl_type)
          stats[cl_type]['reviewed'] = get_cls(['commentby:%s' % user, '-owner:%s' % user], cl_type)

def do_chromium_bugs(stats, user, slash_date):
    query = "owner:%s modified>%s status:fixed" % (user, slash_date)
    cmd = ['monorail', 'list', '--snippet', '-s', 'all', '-n', '10000', '-q', query]
    lines = run_cmd(cmd)
    stats[CRBUG]['fixed'] = Info(len(lines), query)
    query = "reporter:%s opened>%s" % (user, slash_date)
    cmd = ['monorail', 'list', '--snippet', '-s', 'all', '-n', '10000', '-q', query]
    lines = run_cmd(cmd)
    stats[CRBUG]['opened'] = Info(len(lines), query.replace(' ', '%20'))

def do_private_bugs(stats, user, start_date):
    query = "a:%s modified>%s status:fixed" % (user, start_date)
    cmd = ['bugged', 'search', query]
    # The first line is a heading, so drop it
    lines = run_cmd(cmd)[1:]
    stats[BUGANIZER]['fixed'] = Info(len(lines), query)
    query = "r:%s created>%s" % (user, start_date)
    cmd = ['bugged', 'search', query]
    lines = run_cmd(cmd)[1:]
    stats[BUGANIZER]['opened'] = Info(len(lines), query)

def GetStat(stats, cl_type, name):
    stat = stats[cl_type]
    if name in stat:
      return stat[name].count
    return 0

def GetQuery(stats, cl_type, name):
    stat = stats[cl_type]
    if name in stat:
      return stat[name].query
    return ''

def GetMarkup(html, count, label, name, fmt, stats, cl_type):
  query = GetQuery(stats, cl_type, name)
  stat = stats[cl_type]
  if name not in stat:
    print 'name', name, 'not found in ', stat
    return ''
  query = stat[name].query
  #print 'query', query
  query = query.replace(' ', '+')
  if html:
    #print 'fmt', fmt
    #print 'query', query
    if '%' in fmt:
      fmt = fmt % query
    return '%d <a href="%s">%s</a>' % (count, fmt, label)
  else:
    return '[%s](%s)' % (name, fmt % query)

def GetClMessage(stats, user, label, html=True):
    private = GetStat(stats, CL_PRIVATE, label)
    public = GetStat(stats, CL_PUBLIC, label)
    coreboot = GetStat(stats, CL_COREBOOT, label)
    google3 = GetStat(stats, CL_GOOGLE3, label)
    items = []

    #if private:
    items.append(GetMarkup(html, public, 'public', label,
        'https://chromium-review.googlesource.com/q/%s',
        stats, CL_PRIVATE))
    #if public:
    items.append(GetMarkup(html, private, 'private', label,
        'https://chrome-internal-review.googlesource.com/q/%s',
        stats, CL_PUBLIC))
    #if coreboot:
    items.append(GetMarkup(html, coreboot, 'coreboot', label,
        'https://review.coreboot.org/q/%s',
        stats, CL_COREBOOT))
    query = 'https://critique.corp.google.com/#search/&q=status:submitted from:%s ' % slash_date
    if label == 'submitted':
      query += 'a:%s' % user
    else:
      query += '-a:%s r:%s' % (user, user)
    items.append(GetMarkup(html, google3, 'google3', label, query, stats,
                           CL_GOOGLE3))
    msg = ', '.join(items)
    if msg:
        msg = ' (%s)' % msg
    return private + public + coreboot, msg

def do_google3():
    print
    print
    cmd = 'g4d -f snippets'
    os.system(cmd)
    cmd = 'g4 sync; blaze run //ops/managedsystems/tools/autosnippet:autosnippet -- --week=-1 --pending_cls=false --markdown'
    os.system(cmd)


def GetBugMessage(stats, label, html=True):
    private = stats[BUGANIZER][label].count
    public = stats[CRBUG][label].count
    items = []
    if private:
        items.append(GetMarkup(html, private, 'private', label,
            'http://b/issues?q=%s', stats, BUGANIZER))
    if public:
        items.append(GetMarkup(html, public, 'public', label,
            'https://bugs.chromium.org/p/chromium/issues/list?can=1&q=%s',
            stats, CRBUG))
    msg = ', '.join(items)
    if msg:
        msg = ' (%s)' % msg
    return private + public, msg

def GetStatsText(user, stat_set):
  stats = {}
  for stat in tuple(BUG_TYPES) + tuple(CL_TYPES):
    stats[stat] = {}
  if CLS in stat_set:
    do_all_cls(stats, user, WHICH_CLS)
    total_submitted, msg_submitted = GetClMessage(stats, user, 'submitted')
    total_reviewed, msg_reviewed = GetClMessage(stats, user, 'reviewed')
  if BUGS in stat_set:
    do_chromium_bugs(stats, user, slash_date)
    do_private_bugs(stats, user, start_date)
  #print stats
  out = '''<!DOCTYPE html><html>
<body>
'''
  out = '<p>\n'

  if CLS in stat_set:
    out += '%s, ' % user
    out += '%d CLs%s, ' % (total_submitted, msg_submitted)
    out += '%d reviewed%s, ' % (total_reviewed, msg_reviewed)

  if BUGS in stat_set:
    total_fixed, msg_fixed = GetBugMessage(stats, 'fixed')
    total_opened, msg_opened = GetBugMessage(stats, 'opened')
    out += '%d bugs fixed%s, ' % (total_fixed, msg_fixed)
    out += '%d bugs opened%s' % (total_opened, msg_opened)
    out += '\n'
  return out

  out += '''</body>
</html>
'''
  return out

class TestElf(unittest.TestCase):
  def setUp(self):
    global testing
    testing = True

  def testOutput(self):
    print GetStatsText('test')

def InCrosTree():
  cur = os.getcwd()
  while cur != '/':
    check = os.path.join(cur, '.repo', 'manifest.xml')
    if os.path.exists(check):
      return True
    cur = os.path.dirname(cur)


def Main(args):
  parser = argparse.ArgumentParser(description='Show stats for people')
  parser.add_argument('user', type=str, nargs='+', help='user name to look at')
  parser.add_argument('-t', '--test', action='store_true',
                      help='run unit tests')
  args = parser.parse_args(args)
  if args.test:
    sys.argv = [sys.argv[0]]
    unittest.main()
    return
  if not InCrosTree():
    print 'Please change to a directory in a Chrome OS source tree'
    sys.exit(1)
  owner = run_cmd(['whoami'])[0]
  print 'Start date: %s' % start_date
  with open('/usr/local/google/home/%s/x20/www/stats.html' % owner, 'a') as fd:
    for user in args.user:
      out = GetStatsText(user, STATS)
      print >>fd, out
      print out


if __name__ == '__main__':
  sys.exit(Main(sys.argv[1:]))
