# Git aliases
#
# Simon Glass <sjg@chromium.org>
#
# Put this in your ~/bin directory and this in your ~/.bashrc :
#
# . ~/bin/git-alias
#
get_branch() {
	# try @{upstream} first since it is easy
	upstream=$(git name-rev @{upstream} --name-only 2>/dev/null)
	if [ -z "${upstream}" ]; then
		upstream=$(git log --oneline  -n 50 |grep git5track |head -1 |cut -f 1 -d " ")
	fi
	if [ -n "${upstream}" ]; then
		echo ${upstream}
		return
	fi
	# maybe we are in the middle of a rebase
	upstream=$(git name-rev @{-1} --name-only)
	echo "Warning: Using upstream branch ${upstream}" >/dev/stderr

	local remote=$(git config -l | \
		sed -n "s#branch.${upstream}.remote=\(.*\)#\1#p")
	local merge=$(git config -l | \
		sed -n "s#branch.${upstream}.merge=refs/heads/\(.*\)#\1#p")
	[ -n "${remote}${merge}" ] || (
		echo "Error: No tracking branch" >/dev/stderr;
		echo "Use 'git branch --set-upstream ${upstream} upstream/foo'" \
			>/dev/stderr;
		echo >/dev/stderr;
		return 1)
	if [ "${remote}" == "." ]; then
		echo ${merge}
	else
		echo ${remote}/${merge}
	fi
}

# show changed made in top commit (useful when working through a rebase -i)
alias dh='git --no-pager difftool HEAD~'

# move to next commit during a rebase
alias rc='git rebase --continue'
alias rs='git rebase --skip'

# add all changed files
alias au='git add -u'


git_log_oneline() {
	if [ $# -eq 0 ]; then
		git log --oneline --decorate $(get_branch).. $@
	else
		git log --oneline --decorate $@
	fi
}

# show short list of commits in this branch
alias ol='git_log_oneline'

# show stat log of commits in this branch
alias sl='git log --stat $(get_branch)..'

# commit
alias gc='git commit'

# amend - useful during rebase also
alias am='git commit --amend'

# type this a lot
alias g='git status -sb'

# for looking at a commit
alias gs='git show'

# show stat
alias ss='git show --stat'

alias gb='git branch'
alias gba='git branch -a'

function interactive_rebase()
{
	if [ -z "$1" ]; then
		git rebase -i $(get_branch)
	else
		git rebase -i HEAD~$1
	fi
}

alias gr='interactive_rebase'

function next_commit_changes()
{
	out=$(git log --numstat --pretty=format: -n1 | tail -n+1)
	echo "$out" | awk '{printf("%s ", $3)}'
}

function diff_branch()
{
	echo "Changes in this commit:"
	echo
	git log --stat --oneline -n1

	echo
	echo "Now performing diff against branch on those files only"

	# print a stat list first
	echo $(next_commit_changes)
	git difftool $1 --stat -- $(next_commit_changes)

	# now run meld on each diff
	git --no-pager difftool $1 -- $(next_commit_changes)
}

# db <branch>

# this is for splitting a large commit into multiple ones

# Usage:
# git checkout mmc2
# git rebase -i HEAD~4
# on a commit use:
# db mmc2
# this will print a list of changes to the files used by THIS commit
# which have been made at mmc2
alias db='diff_branch'

alias rhard='git reset --hard HEAD'
alias gp='git cherry-pick'

function show_commit()
{
	git --no-pager difftool $1~..$1
}
alias sd='show_commit'
alias gd='git --no-pager difftool'
alias gdc='git --no-pager difftool --cached'
alias gc='git commit'
alias co='git checkout'

function do_tag_archive()
{
	git show $1 |head -5 && git tag archive/$1-$(date +%d-%b-%y) $1 && git branch -D $1
}

alias tag_archive='do_tag_archive $1'

alias gl='git log'
alias glo='git log --oneline --decorate'

# set_upstream [upstream_branch]
# Sets the upstream branch for the current branch
# If arg is omitted, will use m/master
function set_upstream()
{
	branch=$(git name-rev HEAD --name-only)

	upstream=${1-m/master}
#	echo ${upstream} ${branch}
	if [ -n ${branch} ]; then
#		if ! git branch --set-upstream-to ${branch}/${upstream}; then
		git branch --set-upstream-to ${upstream} ${branch}
#		     	echo bad
#			commits=$(glo -n100 |grep -n git5 | sed 's/:.*//')
#			echo ${commits}
#			git branch -D us-git5
#			git branch us-git5 HEAD~$(($commits - 1))
#		fi
	else
		echo "Cannot test current branch"
	fi
}

alias us='set_upstream'
alias et='git rebase --edit-todo'


function meld_kconfig()
{
	crosfw $1 -T cfg && \
	make O=/tmp/b/$1 savedefconfig && \
	meld /tmp/b/$1/defconfig configs/$1_defconfig
}

function fix_kconfig()
{
	crosfw $1 -T cfg && \
	make O=/tmp/b/$1 savedefconfig && \
	cp /tmp/b/$1/defconfig configs/$1_defconfig
}

alias pe='git log --oneline -n10 --decorate'

alias pm='patch -p1 --merge <.git/rebase-apply/patch'

alias good='git bisect good'
alias bad='git bisect bad'

alias rb='git rebase m/master'

alias gm='git log --oneline us/master | grep $1'
alias gmn='git log --oneline us/next | grep $1'

# Grep the U-Boot map for board $b
function mg() {
	grep -A1 -B1 $1 /tmp/b/$b/u-boot.map
}

# Grep the U-Boot .config for board $b
function cg() {
	grep $1 /tmp/b/$b/.config
}

function rt_get_suite_and_name() {
	local arg="$1"
	#echo arg $arg
	suite=
	name=

	# The symbol is something like this:
	#	_u_boot_list_2_ut_bootstd_test_2_vbe_simple_test_base
	# Split it into the suite name (bootstd) and test name
	# (vbe_simple_test_base)
	read suite name < \
		<(nm /tmp/b/$exec/u-boot |grep "list_2_ut.*$arg.*" \
			| cut -d' ' -f3 \
			| head -1 \
			| sed -n 's/_u_boot_list_2_ut_\(.*\)_test_2_/\1 /p')
	#echo suite $suite
	#echo name $name
	#name=${1#dm_test_}
	#name=${name#ut_dm_}
}

# Run a test
function rt() {
	local exec=sandbox
	local suite name
	rt_get_suite_and_name $1 $exec

	/tmp/b/$exec/u-boot -T $2 -c "ut $suite $name"
}

# Run a test verbosely
function rtv() {
	local exec=sandbox
	local suite name
	rt_get_suite_and_name $1 $exec

	/tmp/b/$exec/u-boot -v -T $2 -c "ut $suite $name"
}

# Run a test in the debugger
function rtd() {
	local exec=sandbox
	local suite name
	rt_get_suite_and_name $1 $exec

	gdb-multiarch --args /tmp/b/$exec/u-boot -T $2 -c "ut $suite $name"
}

# Run a test in the debugger verbosely
function rtdv() {
	local exec=sandbox
	local suite name
	rt_get_suite_and_name $1 $exec

	gdb-multiarch --args /tmp/b/$exec/u-boot -T $2 -v -c "ut $suite $name"
}

# Run a test in sandbox_spl
function rtspl() {
	local suite name
	rt_get_suite_and_name $1 $exec

	/tmp/b/sandbox_spl/spl/u-boot-spl -u -c "exit"
}

# Run a test on sandbox_spl in the debugger
function rtdspl() {
	local suite name
	rt_get_suite_and_name $1 $exec

	gdb-multiarch --args /tmp/b/sandbox_spl/spl/u-boot-spl -u
}

# Run a test in sandbox_flattree
function rtft() {
	local exec=sandbox_flattree
	local suite name
	rt_get_suite_and_name $1 $exec

	/tmp/b/$exec/u-boot -T $2 -c "ut $suite $name"
}

# Run a test in sandbox_flattree
function rtftv() {
	local exec=sandbox_flattree
	local suite name
	rt_get_suite_and_name $1 $exec

	/tmp/b/$exec/u-boot -T $2 -v -c "ut $suite $name"
}

# Run a test on sandbox_flattree in the debugger
function rtdft() {
	local exec=sandbox_flattree
	local suite name
	rt_get_suite_and_name $1 $exec

	gdb --args /tmp/b/$exec/u-boot -T $2 -c "ut $suite $name"
}

alias ga='echo "Git Aliases v1"'

alias hex='printf %x $1'

function lsb() {
	ls /tmp/b/$b/$@
}

function eg() {
	grep $1 include/linux/errno.h
}

# Run a pytest on sandbox
# $1: Name of test to run (optional, else run all)

function pyt {
	local tests
	local para

	if [ "$1" = "-p" ]; then
		para="-n$(nproc)"
		shift
	fi
	tests="$@"
	echo $para $tests

	shift
	test/py/test.py -B sandbox --build-dir /tmp/b/sandbox ${para} ${tests:+"-k $tests"} $@
}

# Run a pytest on sandbox_flattree
# $1: Name of test to run (optional, else run all)

function pytft {
	local tests="$1"

	shift
	test/py/test.py -B sandbox_flattree --build-dir /tmp/b/sandbox_flattree ${tests:+"-k $tests"} $@
}

# Run a pytest on a baord
# $b is the board
# $1: Name of test to run  (optional, else run all SPL tests)
function pyt_any {
	local run="$1"

	if [ "$run" = "-b" ]; then
		crosfw $b || return 1
		shift
	fi

	[[ -z "$run" ]] && run='test_ofplatdata or test_handoff or test_spl'
	test/py/test.py -B $b --build-dir /tmp/b/$b -k "$run"
}

# Run a pytest on sandbox_spl
# $1: Name of test to run  (optional, else run all SPL tests)
function pytspl {
	b=sandbox_spl
	pyt_any "$@"
}

# Run a pytest on sandbox_vpl
# $1: Name of test to run (optional, else run all VPL tests)
function pytvpl {
	b=sandbox_vpl
	pyt_any "$@"
}

# Run a pytest on sandbox_noinst
# $1: Name of test to run  (optional, else run all SPL tests)
function pytni {
	b=sandbox_noinst
	pyt_any "$@"
}

function grep_branch_for_commits() {
	branch=$1
	count=$2
	upstream=$3

	echo "branch ${branch}"
	echo "count ${count}"
	echo "upstream ${upstream}"
	git log -n${count} --format=%s ${branch} | while read c; do
		if git log --oneline -n25000 ${upstream} | grep -q "$c"; then
			echo -e "\e[92mFound: $c"
		else
			echo -e "\e[91mNot found: $c"
		fi
	done
	echo -n -e "\e[0m"
}

# Check which of the top 5 commits in a branch are in master
function gmb() {
	branch=$1
	count=${2:-5}

	grep_branch_for_commits ${branch} ${count} us/master
}

# Check which of the top 5 commits in a branch are in next
function gnb() {
	branch=$1
	count=${2:-20}

	grep_branch_for_commits ${branch} ${count} us/next
}

function list_not_applied() {
	# a simple 'git branch' shows a * against the current branch, which
	# causes all files in the current dir to be included in the list. So
	# set the format directly.
	for b in $(gb --format='%(refname:short)'); do
		echo;
		echo "Branch: $b";
		gmb $b;
	done
}

alias st='git stash'
alias ust='git stash apply'
